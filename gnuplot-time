#!/usr/bin/env perl
use warnings;
use strict;
#
# Plot tab separated values time series data

use File::Spec;

# allow the libs to be in the bin dir
use FindBin;
use lib File::Spec->catdir($FindBin::RealBin,"lib");
use lib File::Spec->catdir($ENV{HOME},"s/bin/lib");

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use File::Temp qw( tempfile );

use HC::Common;

my $option = {
    lines   => 1,
    plot    => 1,
    xcol    => 1,
    ylabel  => 'units',
    xlabel  => 'Time (GMT)',
    xformat => '%Y-%m-%d %H:%M',
    smooth  => '',
    output  => '',
    outputoptions => '',
    title   => 'Time series Plot',
};
my @option_list = (
    "show",
    "plot!",
    "logscale|log!",
    "lines!",
    "xcol|x=s",
    "ylabel=s",
    "smooth!",
    "days",
    "pdf=s",
    "ps=s",
    "output=s",
    "outputfile=s",
);

sub usage() {
    print <<EOF
Usage: $0 [--help] [--pdf FILENAME] ( FILE [FIELD...] )...

--show      - show the plot script
--noplot    - do not run gnuplot
--logscale  - use a logrythmic scale
--nolines   - do not use lines to join the points
--xcol N    - specify the column number for the X axis
--ylabel X  - set the y label
--smooth    - apply some simple smoothing to plot
--days      - Show time as days since start of year

Files a tab separated data, first column has epoch date data.  Comments are
allowed and specially formatted comments can name the columns.
EOF
}

sub main() {
    HC::Common::do_options($option,@option_list);
    if (defined($option->{help})) {
        usage();
        return -1;
    };

    if ($option->{pdf}) {
        $option->{output}='pdf';
        $option->{outputfile}=$option->{pdf};
        $option->{outputoptions}="size 11,8";
    }
    if ($option->{ps}) {
        $option->{output}='postscript';
        $option->{outputfile}=$option->{ps};
        $option->{outputoptions}="color solid";
    }

    if ($option->{output} eq 'x11') {
        $option->{outputpause} = 1;
    }

    #if ($option->{output} eq 'wxt') {
    #    $option->{outputpause} = 1;
    #    $option->{outputoptions}="size 800,600";
    #}

    if ($option->{output} eq '') {
        $option->{outputpause} = 1;
    }

    if ($option->{days}) {
        $option->{xformat}='%j';
        $option->{xlabel}='Days';
    }
    if ($option->{smooth}) {
        $option->{title}.=' (smoothed)';
        $option->{smooth}="smooth bezier";
    }

    if (!defined($ARGV[0])) {
        print("need filename\n");
        return -1;
    }

    my $s;

    #echo $"set label 'generated by `whoami` at `date +%Y-%m-%d`' at 1,1"
    $s.=<<EOF
        set timestamp 'generated by $ENV{LOGNAME} at %Y-%m-%d %H:%M:%S'
        set title '$option->{title}'
        set xlabel '$option->{xlabel}'
        set ylabel '$option->{ylabel}'

        set timefmt '%s'
        set xdata time
        set format x '$option->{xformat}'
        set xtics out rotate by -35
        set mouse clipboardformat 5
        set mouse mouseformat 5
        set grid ytics mytics lw 2, lw 1
        set autoscale fix

        set key left top Left title 'Legend' box 3

EOF
;

    if ($option->{lines}) {
        $s.="set style data lines\n";
    }
    if ($option->{logscale}) {
        $s.="set logscale y\n";
    }

    if ($option->{output}) {
        $s.="set terminal ".$option->{output}." ".$option->{outputoptions}."\n";
    }
    if ($option->{outputfile}) {
        $s.="set output '$option->{outputfile}'\n";
    }
    $s.="\n";

    # FIXME - these two used for communication between runs of the for loop
    my $FILECMD;
    my $FILE_TITLE;

    my $FILE;

    my $LINE;
    for my $f (@ARGV) {

        if ( -e $f ) {
            # This arg is a filename
            if ( $f =~ m/\.gz$/ ) {
                $FILECMD="gzip -dc $f";
            } elsif ( $f =~ m/\.xz$/ ) {
                $FILECMD="xz -dc $f";
            } else {
		$FILE=$f;
                $FILECMD=undef;
            }

            if (defined($FILECMD)) {
                $FILE="<$FILECMD";
            } else {
                $FILECMD="cat $FILE";
            }
            $FILE_TITLE=$f;
            next;
        }

        my $TITLE;

        if ( $f =~ m/^f:(.*)/ ) {
            # This arg is a function
            $f='('.$1.')';
            $TITLE = '';
        } else {
            # This arg is a column

            # try to guess the column name
            # FIXME - dont shell out
            my $FIELD=`$FILECMD | head -500 | egrep "^#column $f " |head -1 | cut -d" " -f3-`;
            chomp($FIELD);

            if ($FIELD ne '') {
                $TITLE="$FIELD=";
            } else {
                $TITLE="";
            }
        }

        $TITLE="$TITLE$FILE_TITLE:$f";
        my $THIS="'$FILE' using $option->{xcol}:$f $option->{smooth} title '$TITLE'";

        if (defined($LINE)) {
            $LINE.=",";
        }
        $LINE.="\\\n $THIS";
    }

    if (!defined($LINE)) {
        # default to column 2, if none are on the cmdline
        $LINE="'$FILE' using $option->{xcol}:2 title '$FILE:2'";
    }

    $s.="plot $LINE\n";
    $s.="\n";

    if ($option->{outputpause}) {
        $s.="pause mouse close\n";
    }
#

    if ($option->{show}) {
        print($s);
    }

    if ($option->{plot}) {
        my ($fh,$filename) = tempfile();
        $fh->print($s);

        # If gnuplot has a valid stdin, it will for data to be ready on
        # it before the shell prompt is returned, but it ignores that data
        close STDIN;

        system("gnuplot $filename");
        unlink($filename);
    }

    return 0;
}
exit main();

__END__

# TODO
- handle "-" as a filename

