#!/usr/bin/env perl
use warnings;
use strict;
#
# Plot tab separated values time series data

use File::Spec;

# allow the libs to be in the bin dir
use FindBin;
use lib File::Spec->catdir($FindBin::RealBin,"lib");
use lib File::Spec->catdir($ENV{HOME},"s/bin/lib");

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

use File::Temp qw( tempfile );

use HC::Common;

my $option = {
    lines   => 1,
    plot    => 1,
    xcol    => 1,
    ylabel  => 'units',
    xlabel  => 'Time (GMT)',
    xformat => '%Y-%m-%d %H:%M',
    smooth  => '',
    output  => '',
    outputoptions => '',
    title   => 'Time series Plot',
};
my @option_list = (
    "show",
    "plot!",
    "logscale|log!",
    "lines!",
    "xcol|x=s",
    "ylabel=s",
    "xlabel=s",
    "smooth!",
    "days",
    "pdf=s",
    "ps=s",
    "output=s",
    "outputfile=s",
    "notime",
);

sub usage() {
    print <<EOF
Usage: $0 [--help] [--pdf FILENAME] ( FILE [FIELD...] )...

--show      - show the plot script
--noplot    - do not run gnuplot
--logscale  - use a logrythmic scale
--nolines   - do not use lines to join the points
--xcol N    - specify the column number for the X axis
--ylabel X  - set the y label
--smooth    - apply some simple smoothing to plot
--days      - Show time as days since start of year
--notime    - the X axis is not a date/time after all

Files a tab separated data, first column has epoch date data.  Comments are
allowed and specially formatted comments can name the columns.
EOF
}

# Given a filename, return the commandline that would uncompress and cat it.
# Since this is used instead of just providing a filename, the obvious null
# function of "just cat" is instead returned as undef
sub get_catcmd {
    my ($filename) = @_;

         if ( $filename =~ m/\.gz$/ ) {
        return "gzip -dc $filename";
    } elsif ( $filename =~ m/\.xz$/ ) {
        return "xz -dc $filename";
    }

    return undef;
}

# Given a column ID (could be a number or a name), attempt to determine the
# missing data - returning both the column number and a name for that column
#
# TODO - handle name in input, not just number
sub guess_column {
    my ($filename,$column) = @_;

    my $column_number;
    my $column_name;

    my $catcmd = get_catcmd($filename);
    if (!defined($catcmd)) {
        $catcmd="cat $filename";
    }

    # FIXME - dont shell out
    $column_name=`$catcmd | head -500 | egrep -a "^#column $column " |head -1 | cut -d" " -f3-`;
    chomp($column_name);

    $column_number = $column;

    return ($column_number,$column_name);
}

# return the gnuplot command fragment for plotting the given file and column
#
sub get_plotcmd {
    my ($filename,$column) = @_;

    my $plotfile = get_catcmd($filename);
    if (defined($plotfile)) {
        $plotfile = '<'.$plotfile;
    } else {
        $plotfile = $filename;
    }

    my $TITLE;

    if ( $column =~ m/^f:(.*)/ ) {
        # This arg is a function
        $column="(".$1.")";
        $TITLE="$filename:$column";
    } else {

        # try to guess the column name
        my ($nr,$column_name)=guess_column($filename,$column);

        if ($column_name ne '') {
            # if we have a field name, show it in the title
            $TITLE="$column_name=$filename:$column";
        } else {
            $TITLE="$filename:$column";
        }
    }

    my $THIS="'$plotfile' using $option->{xcol}:$column $option->{smooth} title '$TITLE'";

    return $THIS;
}

sub main() {
    HC::Common::do_options($option,@option_list);
    if (defined($option->{help})) {
        usage();
        return -1;
    };

    if ($option->{pdf}) {
        $option->{output}='pdf';
        $option->{outputfile}=$option->{pdf};
        $option->{outputoptions}="size 11,8";
    }
    if ($option->{ps}) {
        $option->{output}='postscript';
        $option->{outputfile}=$option->{ps};
        $option->{outputoptions}="color solid";
    }

    if ($option->{output} eq 'x11') {
        $option->{outputpause} = 1;
    }

    #if ($option->{output} eq 'wxt') {
    #    $option->{outputpause} = 1;
    #    $option->{outputoptions}="size 800,600";
    #}

    if ($option->{output} eq '') {
        $option->{outputpause} = 1;
    }

    if ($option->{days}) {
        $option->{xformat}='%j';
        $option->{xlabel}='Days';
        # FIXME - dont overwrite it if xlabel has been given on the cmdline
    }
    if ($option->{smooth}) {
        $option->{title}.=' (smoothed)';
        $option->{smooth}="smooth bezier";
    }

    if (!defined($ARGV[0])) {
        print("need filename\n");
        return -1;
    }

    my $s;

    #echo $"set label 'generated by `whoami` at `date +%Y-%m-%d`' at 1,1"
    $s.=<<EOF
        set timestamp 'generated by $ENV{LOGNAME} at %F %T'
        set title '$option->{title}'
        set xlabel '$option->{xlabel}'
        set ylabel '$option->{ylabel}'

        #set xtics out rotate by -15 86400
        set xtics out rotate by -15
        set mouse clipboardformat 5
        set grid ytics mytics lw 2, lw 1
        set grid xtics
        set autoscale fix

        set key left top Left title 'Legend' box 3

EOF
;
    if ($option->{notime}) {
    } else {
        $s.="set timefmt '%s'\n";
        $s.="set xdata time\n";
        $s.="set format x '$option->{xformat}'\n";
        $s.="set mouse mouseformat 5\n";
        # FIXME - if xlabel is default, change it to "Units"
    }

    if ($option->{lines}) {
        $s.="set style data lines\n";
    }
    if ($option->{logscale}) {
        $s.="set logscale y\n";
    }

    if ($option->{output}) {
        $s.="set terminal ".$option->{output}." ".$option->{outputoptions}."\n";
    }
    if ($option->{outputfile}) {
        $s.="set output '$option->{outputfile}'\n";
    }
    $s.="\n";

    my @save_files;
    my @save_columns;
    my $plotted_save_files=0;
    my $plotted_save_columns=0;

    my @plots;
    for my $f (@ARGV) {

        if ( $f =~ m/^f:([^\$]+)/ ) {
            # this is a function with no reference to a file column
            push @plots, $1;
        } elsif ( -e $f ) {
            # This arg is a filename (TODO - improve on 'if exists')

            if (@save_columns) {
                # we have some columns queued up
                for my $column (@save_columns) {
                    push @plots, get_plotcmd($f,$column);
                }
                $plotted_save_columns = 1;
            } else {
                # save this file for later plotting
                if ($plotted_save_files) {
                    $plotted_save_files=0;
                    @save_files = $f;
                } else {
                    push @save_files, $f;
                }
            }
        } else {
            # must be a column then

            if (@save_files) {
                # we have some files queued up
                for my $file (@save_files) {
                    push @plots, get_plotcmd($file,$f);
                }
                $plotted_save_files = 1;
            } else {
                # save this column for later plotting
                if ($plotted_save_columns) {
                    $plotted_save_columns=0;
                    @save_columns = $f;
                } else {
                    push @save_columns, $f;
                }
            }
        }
    }

    if (@save_columns and !$plotted_save_columns) {
        die("unused columns found: ",join(' ',@save_columns));
    }

    # default to column 2, if none are on the cmdline
    if (@save_files and !$plotted_save_files) {
        for my $file (@save_files) {
            push @plots, get_plotcmd($file,2);
        }
    }

    $s.="plot \\\n";
    $s.=join(",\\\n",@plots);
    $s.="\n";

    if ($option->{outputpause}) {
        $s.="pause mouse close\n";
    }
#

    if ($option->{show}) {
        print($s);
    }

    if ($option->{plot}) {
        my ($fh,$filename) = tempfile();
        $fh->print($s);

        # If gnuplot has a valid stdin, it will for data to be ready on
        # it before the shell prompt is returned, but it ignores that data
        close STDIN;

        my $gnuplot;
        if ( -e '/usr/bin/gnuplot4-x11' ) {
            $gnuplot = '/usr/bin/gnuplot4-x11';
        } elsif (-e '/usr/bin/gnuplot4' ) {
            $gnuplot = '/usr/bin/gnuplot4';
        } else {
            $gnuplot = 'gnuplot';
        }

        system("$gnuplot $filename");
        unlink($filename);
    }

    return 0;
}
exit main();

__END__

# TODO
- handle "-" as a filename

